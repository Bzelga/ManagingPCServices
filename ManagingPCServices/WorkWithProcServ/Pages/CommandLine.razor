@page "/commandline"
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

@implements IAsyncDisposable

<input type="text" @bind-value = "@command"/>
<button @onclick="() => WorkCommandLine(0)">CMD</button>
<button @onclick="() => WorkCommandLine(1)">PowerShell</button>

<p>@((MarkupString)result)</p>

@code {
    private HubConnection hubConnection;
    private string command;
    private string result;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/servicehub"))
            .Build();

        hubConnection.On<string>("Result", (result) =>
        {
            this.result = result.Replace("\n", "<br />");
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    async Task WorkCommandLine(int input)
    {
        result = "";
        //await hubConnection.SendAsync("WorkCommandLine", input, command);
        await hubConnection.SendAsync("Do", new SendCommandPackage{TypeCommand = 1, TypeAction = input, Args = command});
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
