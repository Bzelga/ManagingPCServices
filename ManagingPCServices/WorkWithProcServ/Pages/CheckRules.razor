@page "/checkRules"
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

@implements IAsyncDisposable

<table class="table">
    <thead>
        <tr>
            <th>Название компьютера</th>
            <th>Действие</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (actions.Count != 0)
        {
            @foreach (var action in actions)
            {
                <tr>
                    <td>В разработке</td>
                    <td>@action.TextAction</td>
                    <td>
                        <button @onclick="() => WorkAction(action)">Выполнить</button>
                        <button @onclick="() => WorkAction(action)">Отклонить</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private HubConnection hubConnection;
    private List<ActionModel> actions = new List<ActionModel>();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/servicehub"))
            .Build();

        hubConnection.On<ReceiveCommandPackage>("Result", (result) =>
       {
           if (result.TypeCommand == 4)
               actions.Add(result.ReturnAction);

           StateHasChanged();
       });

        await hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    async Task WorkAction(ActionModel actionModel) =>
       await hubConnection.SendAsync("GetUsersCommand", new SendCommandPackage { TypeCommand = actionModel.TypeCommand, TypeAction = actionModel.TypeAction, ArgsForAction = actionModel.Args });
}
