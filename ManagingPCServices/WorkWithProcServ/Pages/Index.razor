@page "/"
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

@implements IAsyncDisposable

<button @onclick="Off" disabled="@(!IsConnected)">Отключить все</button>

<button @onclick="On" disabled="@(!IsConnected)">Включить все</button>

@if (networkCards != null && networkCards.Count != 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Название</th>
                <th>Статус</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var card in networkCards)
            {
                <tr>
                    <td>@card.Name</td>
                    <td>
                        @if (@card.Status == "OK")
                        {
                            <span>Работает</span>
                        }
                        else
                        {
                            <span>Не работает</span>
                        }
                    </td>
                    <td>
                        <button @onclick="() => WorkCard(2, card.Name)">Отключить</button>
                        <button @onclick="() => WorkCard(3, card.Name)">Включить</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private HubConnection hubConnection;
    private List<NetworkCardModel> networkCards;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/servicehub"))
            .Build();

        hubConnection.On<ReceiveCommandPackage>("Result", (result) =>
        {
            switch (result.TypeCommand)
            {
                case 0:
                    networkCards = result.ReturnNetworkCards.ToList();
                    break;
                case 1:
                    JsRuntime.InvokeVoidAsync("alert", result.ReturtAnswer);
                    break;
                case 2:
                    for (int i = 0; i < networkCards.Count; i++)
                    {
                        if (result.ReturnNetworkCard.Name == networkCards[i].Name)
                        {
                            networkCards[i] = result.ReturnNetworkCard;
                            break;
                        }
                    }
                    break;
            }
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await hubConnection.SendAsync("Do", new SendCommandPackage { TypeCommand = 5, Args = "0" });
    }


    async Task Off() =>
        await hubConnection.SendAsync("Do", new SendCommandPackage { TypeCommand = 0, TypeAction = 0, Args = "" });

    async Task On() =>
        await hubConnection.SendAsync("Do", new SendCommandPackage { TypeCommand = 0, TypeAction = 1, Args = "" });

    async Task WorkCard(int input, string name) =>
        await hubConnection.SendAsync("Do", new SendCommandPackage { TypeCommand = 0, TypeAction = input, Args = name });


    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}