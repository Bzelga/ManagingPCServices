@page "/service"
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

@implements IAsyncDisposable

@if (services != null && services.Count != 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Название сервиса</th>
                <th>Статус</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var service in services)
            {
                <tr>
                    <td>@service.NameService</td>
                    <td>@service.StatusService</td>
                    <td>
                        @if (service.StatusService == "Stopped")
                        {
                            <button @onclick="() => WorkService(1, service.NameService)">Старт</button>
                            <button @onclick="() => WorkService(3, service.NameService)">Перезагрузка</button>
                        }
                        else
                        {
                            <button @onclick="() => WorkService(0, service.NameService)">Стоп</button>
                            <button @onclick="() => WorkService(2, service.NameService)">Пауза</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private HubConnection hubConnection;
    private List<ServiceAndStatusModel> services;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/servicehub"))
            .Build();

        hubConnection.On<ReceiveCommandPackage>("Result", (result) =>
        {
            switch (result.TypeCommand)
            {
                case 0:
                    services = result.ReturnServices.ToList();
                    break;
                case 1:
                    JsRuntime.InvokeVoidAsync("alert", result.ReturtAnswer);
                    break;
                case 2:
                    for (int i = 0; i < services.Count; i++)
                    {
                        if (result.ReturnService.NameService == services[i].NameService)
                        {
                            services[i] = result.ReturnService;
                            break;
                        }
                    }
                    break;
            }
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await hubConnection.SendAsync("Do", new SendCommandPackage { TypeCommand = 5, ArgsForAction = "1" });
    }

    async Task WorkService(int input, string serviceName) =>
        await hubConnection.SendAsync("Do", new SendCommandPackage { TypeCommand = 2, TypeAction = input, ArgsForAction = serviceName });

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
